1.scanf输入
int main()
{
	char a[100] = { 0 };
	scanf("%s", a);
	printf("%s", a);
	return 0;
}
缺点：可以输入并打印，但是char a[]中的[]必须包含元素个数的限制，否则默认为元素个数为初始化的元素个数，输入超过元素个数就会出错，不容易知道自已一共输入了几个字符，无法返回具体的长度；
      scanf的输入不能提取输入缓冲区内的空格；
优点：%s与%c的提取逻辑不同，%s不能提取\n，%c可以提取\n

2.scnaf单个字符输入
int main()
{
	char a[10]="987654321";
	int i = 0;
	for (i = 0; i < 9; i++)
	{
		scanf("%c", &a[i]);
	}
	printf("%s", a);
	return 0;
}
缺点：数组必须要设元素个数，否则循环就没有范围；
      循环次数必须要小于元素个数，最多为元素个数-1个，因为最后一个要为'\0'留位置，如果循环次数和元素个数相等，当输入123456789时，回车会使scanf把最后的回车键吃掉当作元素，取代\0，导致输出不能停止
      会提取空格和\n
优点：可以控制输入的字符，并知道一共输入了几个字符

3.gets类型的输入
int main()
{
	char a[100] = { 0 };
	gets(a);
	puts(a);
	return 0;
}
缺点：可以输入并打印，但是char a[]中的[]必须包含元素个数的限制，否则默认为元素个数为初始化的元素个数，输入超过元素个数就会出错，不容易知道自已一共输入了几个字符，无法返回具体的长度；
优点：可以提取空格字符，不会提取\n字符；
      可以直接把地址传入，不用传类型

4.getchar类型的输入
首先，getchar（）一次只能提取一个字符
例如：
int main()
{
	int a = getchar();
	putchar(a);
	return 0;
}
若输入20，则只能打印2
int main()
{
	char a[10] = {0};
	int i = 0;
	for (i = 0; i < 9; i++)
	{
		a[i] = getchar();
	}
	printf("%s", a);
	return 0;
}
其优缺点基本和scanf（"%c",&a[i]）类似，但胜在更简洁








